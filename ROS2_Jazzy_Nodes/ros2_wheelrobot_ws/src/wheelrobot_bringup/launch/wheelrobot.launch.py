# Launch file for wheel robot
# Date: 1 Aug 2025
# Author: Fabian Kung

import os

from launch import LaunchDescription
from launch_ros.actions import Node
from launch.actions import IncludeLaunchDescription
from launch.launch_description_sources import PythonLaunchDescriptionSource
from ament_index_python.packages import get_package_share_directory

def generate_launch_description():
    
    ld = LaunchDescription()

    # Specify the path to the 'wheelrobot_bringup' package, and also to the URDF file.
    #pkg_share = launch_ros.substitutions.FindPackageShare(package='wheelrobot_bringup').find("wheelrobot_bringup")
    #default_model_path = os.path.join(pkg_share, 'urdf/wheelrobot1.urdf')

    # Find the folder where Lidar driver package is installed, form a path pointing to
    # the Lidar launch file.
    # LIDAR_LAUNCH_FILE = 'ldlidar.launch.py'
    lidar_launch_path = os.path.join(
        get_package_share_directory('ldlidar'),
        'launch',
        'ldlidar.launch.py'
    )

    serialcom_node = Node(
        package = "hw_int_py_pkg",
        executable = "SerialCom"
    )

    rcstate_pub_node = Node(
        package = "hw_int_py_pkg",
        executable = "RCStatePub"
    )

    # Read the content of the URDF file before passing the content as a string to robot_state_publisher.
    # This is different from executing robot_state_publisher in the command line on a Terminal where
    # we pass the a string representing the URDF file path.
    with open('/home/fk/ros2_wheelrobot_ws/src/wheelrobot_bringup/urdf/wheelrobot1.urdf', 'r') as urdf_file:
        robot_description = urdf_file.read()

    robot_state_publisher_node = Node(
        package ="robot_state_publisher",
        executable = "robot_state_publisher",
        parameters=[{'robot_description': robot_description}]
    )

    lidar_launch = IncludeLaunchDescription(
        PythonLaunchDescriptionSource(lidar_launch_path)
    )

    ld.add_action(serialcom_node)
    ld.add_action(rcstate_pub_node)
    ld.add_action(robot_state_publisher_node)
    ld.add_action(lidar_launch)
    return ld






















































































































































































































































































































































































































































































































